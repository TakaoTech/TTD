openapi: "3.0.3"
info:
  title: "Application API"
  description: "Application API"
  version: "1.0.0"
servers:
  - url: "http://127.0.0.1:8080"
paths:
  /admin/github:
    get:
      tags:
        - GitHub Repository Admin
      summary: Get GitHub Repositories
      description: Retrieve a list of GitHub repositories
      parameters:
        - name: category
          in: query
          description: Filter repositories by category
          schema:
            type: string
            enum: [ NONE, KOTLIN, SELF_HOSTED, OTHER ]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GHRepositoryDao'
  /admin/github/refresh:
    get:
      tags:
        - GitHub Repository Admin
      summary: Refresh GitHub Repositories
      description: Refresh the list of GitHub repositories
      parameters:
        - name: mock
          in: query
          description: Launch call as mock
          schema:
            type: boolean
      responses:
        '200':
          description: Refresh successful
        '401':
          description: Unauthorized request
  /admin/github/refresh/cancel:
    get:
      tags:
        - GitHub Repository Admin
      summary: Refresh GitHub Repositories
      description: Refresh the list of GitHub repositories
      responses:
        '200':
          description: Refresh successful
        '401':
          description: Unauthorized request
  /admin/github/refresh/status:
    get:
      tags:
        - GitHub Repository Admin
      summary: Refresh GitHub Repositories
      description: Refresh the list of GitHub repositories
      responses:
        '200':
          description: Refresh successful
        '401':
          description: Unauthorized request
  /admin/github/{id}:
    get:
      tags:
        - GitHub Repository Admin
      summary: Get GitHub Repository by ID
      description: Retrieve a GitHub repository by its ID
      parameters:
        - name: id
          in: path
          description: ID of the GitHub repository to retrieve
          required: true
          schema:
            type: integer
            default: 3432266
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHRepositoryDao'
        '404':
          description: Repository not found
  /admin/github/{id}/updateCategory:
    post:
      tags:
        - GitHub Repository Admin
      summary: Update GitHub Repository Category
      description: Update the category of a GitHub repository
      parameters:
        - name: id
          in: path
          description: ID of the GitHub repository to update
          required: true
          schema:
            type: integer
            default: 3432266
        - name: newCategory
          in: query
          description: New category for the GitHub repository
          schema:
            type: string
            enum: [ NONE, KOTLIN, SELF_HOSTED, OTHER ]
      responses:
        '200':
          description: Category updated successfully
        '404':
          description: Repository not found
        '400':
          description: Invalid category provided
  /admin/github/tags:
    get:
      tags:
        - Tags
      summary: Get Tags
      description: Retrieve a list of tags associated with GitHub repositories
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagDao'
    put:
      tags:
        - Tags
      summary: Add Tag
      description: Add a new tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagNewDao'
      responses:
        '201':
          description: Tag added successfully
        '400':
          description: Bad request
    post:
      tags:
        - Tags
      summary: Update Tag
      description: Update a tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagDao'
      responses:
        '200':
          description: Tag added successfully
        '400':
          description: Bad request
  /admin/github/tags/{id}:
    get:
      tags:
        - Tags
      summary: Get Tag by ID
      description: Retrieve a tag by its ID
      parameters:
        - name: id
          in: path
          description: ID of the tag to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagDao'
        '404':
          description: Tag not found
    delete:
      tags:
        - Tags
      summary: Delete Tag
      description: Delete a tag by its name
      parameters:
        - name: id
          in: query
          description: Name of the tag to delete
          schema:
            type: integer
      responses:
        '200':
          description: Tag deleted successfully
        '404':
          description: Tag not found
  /github:
    get:
      tags:
        - GitHub Repository
      summary: Get GitHub Repositories with Pagination
      description: Retrieve a paginated list of GitHub repositories using TakaoPaging
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHRepositoryMiniDao'
  /github/{id}:
    get:
      tags:
        - GitHub Repository
      summary: Get GitHub Repository by ID
      description: Retrieve a GitHub repository by its ID
      parameters:
        - name: id
          in: path
          description: ID of the GitHub repository to retrieve
          required: true
          schema:
            type: integer
            default: 3432266
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHRepositoryDao'
        '404':
          description: Repository not found
  /github/tags:
    get:
      tags:
        - GitHub Repository
      summary: Get Tags with Pagination
      description: Retrieve a paginated list of tags associated with GitHub repositories
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagDao'
components:
  schemas:
    GHRepositoryDao:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the repository
        name:
          type: string
          description: The name of the repository
        fullName:
          type: string
          description: The full name of the repository
        url:
          type: string
          format: uri
          description: The URL of the repository
        user:
          $ref: '#/components/schemas/GHUser'
        languages:
          type: object
          additionalProperties:
            type: integer
          description: A map of languages used in the repository and their line counts
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagDao'
          description: A list of tags associated with the repository
        mainCategory:
          $ref: '#/components/schemas/MainCategory'
          description: The main category of the repository
        license:
          type: string
          description: The license of the repository (optional)
        licenseUrl:
          type: string
          format: uri
          description: The URL to the license of the repository (optional)
        description:
          type: string
          description: A description of the repository (optional)
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the repository was last updated
    GHUser:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the user
        name:
          type: string
          description: The name of the user
        url:
          type: string
          format: uri
          description: The URL of the user's profile
    TagDao:
      type: object
      properties:
        id:
          type: integer
          description: The id of the tag
        name:
          type: string
          description: The name of the tag
        description:
          type: string
          description: The description of the tag
        color:
          type: string
          description: The color of the tag
    TagNewDao:
      type: object
      properties:
        name:
          type: string
          description: The name of the tag
        description:
          type: string
          description: The description of the tag
        color:
          type: string
          description: The color of the tag
    MainCategory:
      type: string
      enum:
        - NONE
        - KOTLIN
        - SELF_HOSTED
        - OTHER
    GHRepositoryMiniDao:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the repository
        fullName:
          type: string
          description: The full name of the repository
        license:
          type: string
          nullable: true
          description: The license of the repository (optional)
        languages:
          type: object
          additionalProperties:
            type: integer
          description: A map of languages used in the repository and their line counts
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the repository was last updated
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagDao'
          description: A list of tags associated with the repository
    TakaoPaging:
      type: object
      properties:
        data:
          type: array
          items: { }
          description: The paginated data
        page:
          type: integer
          description: The current page number
        totalPage:
          type: integer
          description: The total number of pages
